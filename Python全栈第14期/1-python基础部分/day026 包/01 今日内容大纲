一. 昨日内容回顾
    1. re
        findall() 查找所有匹配的内容. list
        finditer()  返回迭代器
        search() 查找. 找到一个就返回 . 如果找不到返回None
        match() 匹配. 从头匹配

        sub() 根据正则替换
        subn() 根据正则替换, 返回结果和替换的次数
        split() 根据正则切割

        compile() 编译正则.

        分组
            ()python中的分组.   (?:)取消python的分组.
            (?P<名字>正则) 取值的关键

    2. 模块
        我们写的py文件就是一个模块.
        1. import 模块
        2. from 模块 import xxx

        加载模块的过程:
            1. 先去查看是否加载过该模块   顺序: 内存-> 内置 -> sys.path
            2. 如果没有加载过. 开辟一个名称空间
            3. 执行该模块中的代码, 所有产生的变量/类/函数都放在名称空间中
            4. 给名称空间命名. 如果没有as  用模块名作为名字. 如果有as 用as后面的名字

        import a, b, c 一次导入多个模块
        from 模块 import a, b, c as xxx
        from xxx import *

二. 作业



三. 今日主要内容
    1. from xxxx import *
        从xxx导入所有. 如果模块内部有__all__ 导入all中的内容. 如果没有__all__全部都导入
    2. 包
        文件夹内包含了__init__.在导入包的时候, 默认执行__init__.py
        查找的顺序: 内存 -> 内置 -> sys.path
        sys.path有坑: 根据你启动的脚本所在的位置确定查找包, 模块的路径
        sys.path.insert(0, "你想加入的位置")
        1. 绝对路径
            从sys.path找. 根
        2. 相对路径
            相对于当前文件所在文件夹
            . 当前
            .. 上一层
            启动脚本不能在包内

    预习:
        网络编程
            ip
            tcp
            udp

    考试:
        基础+函数+模块+面向对象
        包不考

    大作业:
